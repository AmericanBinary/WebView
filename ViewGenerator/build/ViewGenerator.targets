<Project>
  <PropertyGroup>

    <BuildDependsOn>
      VG_SetVariables;
      VG_CopyContentFiles;
      VG_LinkNodeModules;
      VG_GenerateDefaultStyleSheet;
      VG_GenerateBundle;
      $(BuildDependsOn);
    </BuildDependsOn>

    <CleanDependsOn>
      VG_CleanLegacyEntryFiles;
      VG_CleanLegacyJSFiles;
      VG_CleanLegacyCSSFiles;
      $(CleanDependsOn);
    </CleanDependsOn>

    <PrepareResourceNamesDependsOn>
      VG_IncludeGeneratedResources;
      $(PrepareResourceNamesDependsOn)
    </PrepareResourceNamesDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ViewGeneratorNodeJsPath)' == ''">
    <!-- Best effort probing for node.exe in the VS install folder. If not found, then we assume node is already installed and on the system path. -->
    <ViewGeneratorNodeJsPath Condition="'$(OS)' == 'Windows_NT' AND Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\NodeJs\node.exe')">$(MSBuildExtensionsPath)\Microsoft\VisualStudio\NodeJs\</ViewGeneratorNodeJsPath>

    <!--Legacy node.exe path for VS -->
    <ViewGeneratorNodeJsPath Condition="'$(ViewGeneratorNodeJsPath)' == '' AND '$(OS)' == 'Windows_NT' AND Exists('$(VsInstallRoot)\Common7\IDE\CommonExtensions\Microsoft\NodeJs\node.exe')">$(VsInstallRoot)\Common7\IDE\CommonExtensions\Microsoft\NodeJs\</ViewGeneratorNodeJsPath>

    <!--Another legacy node.exe path for VS -->
    <ViewGeneratorNodeJsPath Condition="'$(ViewGeneratorNodeJsPath)' == '' AND '$(OS)' == 'Windows_NT' AND Exists('$(VsInstallRoot)\Web\External\x86\node.exe')">$(VsInstallRoot)\Web\External\x86\</ViewGeneratorNodeJsPath>

    <ViewGeneratorNodeJsExe>$(ViewGeneratorNodeJsPath)node.exe</ViewGeneratorNodeJsExe>
  </PropertyGroup>

  <Target Name="VG_SetVariables">
    <PropertyGroup>
      <ViewGeneratorPath>$([System.IO.Path]::GetFullPath(&quot;$(MSBuildThisFileDirectory)..\&quot;))</ViewGeneratorPath>
      <ViewGeneratorToolsPath>$(ViewGeneratorPath)tools</ViewGeneratorToolsPath>
      <ViewGeneratorContentFilesPath>$(ViewGeneratorPath)contentFiles\</ViewGeneratorContentFilesPath>
  </PropertyGroup>
  </Target>

  <Target Name="VG_LinkNodeModules" Condition="'$(PluginsRelativePath)' != ''" >
    <CallTarget Targets="VG_UnlinkNodeModules" Condition="Exists('$(ProjectDir)node_modules\webview.plugins')" />

    <Exec Command="mklink /D &quot;$(ProjectDir)node_modules\webview.plugins&quot; &quot;$(ProjectDir)$(PluginsRelativePath)node_modules&quot;" />
  </Target>

  <Target Name="VG_UnlinkNodeModules">
    <RemoveDir Directories="$(ProjectDir)node_modules\webview.plugins" />
  </Target>
    
  <Target Name="VG_CleanLegacyEntryFiles" >
    <ItemGroup>
      <EntryFilesToDelete Include="**\*.entry" />
    </ItemGroup>
    <Message Text="Deleting old files: @(EntryFilesToDelete)" Importance="high" />
    <Delete Files="@(EntryFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanLegacyJSFiles" >
    <ItemGroup>
      <JSFilesToDelete Include="**\*.js" Exclude="node_modules\**\*.js"/>
    </ItemGroup>
    <Message Text="Deleting old files: @(JSFilesToDelete)" Importance="high" />
    <Delete Files="@(JSFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanLegacyCSSFiles" >
    <ItemGroup>
      <CSSFilesToDelete Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css"/>
    </ItemGroup>
    <Message Text="Deleting old files: @(CSSFilesToDelete)" Importance="high" />
    <Delete Files="@(CSSFilesToDelete)"/>
  </Target>

  <Target Name="VG_GenerateDefaultStyleSheet" DependsOnTargets="VG_EnsureViewPackerInstalled;VG_SetVariables;VG_LinkNodeModules" Inputs="@(DefaultStyleSheet)" Outputs="%(DefaultStyleSheet.Filename).css" >
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
      <WebpackBuildMode>development</WebpackBuildMode>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
      <WebpackBuildMode>production</WebpackBuildMode>
    </PropertyGroup>
    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config &quot;$(ViewGeneratorToolsPath)\webpack_stylesheets.config.js&quot; --mode $(WebpackBuildMode) --entryPath &quot;%(DefaultStyleSheet.Identity)&quot;" />
  </Target>

  <Target Name="VG_EnsureViewPackerInstalled" Condition="'$(ViewPackerToolScript)' == ''">
    <Error Text="View Packer dependency is not installed" />
  </Target>
  
  <Target Name="VG_GenerateBundle" DependsOnTargets="VG_EnsureViewPackerInstalled;VG_SetVariables;VG_CopyContentFiles;VG_GenerateDefaultStyleSheet">
    <PropertyGroup Condition="'$(WebpackConfigFileName)' == ''">
      <WebpackConfigFileName>webpack_views</WebpackConfigFileName>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
      <WebpackBuildMode>development</WebpackBuildMode>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
      <WebpackBuildMode>production</WebpackBuildMode>
    </PropertyGroup>

    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config &quot;$(ViewGeneratorToolsPath)\$(WebpackConfigFileName).config.js&quot; --mode $(WebpackBuildMode) --pluginsRelativePath &quot;$(PluginsRelativePath)&quot;" />

    <CallTarget Targets="VG_UnlinkNodeModules" Condition="Exists('$(ProjectDir)node_modules\webview.plugins')" />
  </Target>

  <Target Name="VG_IncludeGeneratedResources" DependsOnTargets="VG_GenerateBundle">
    <ItemGroup>
      <EmbeddedResource Include="**\*.js" Exclude="node_modules\**\*.js" />
      <EmbeddedResource Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css" />
      <EmbeddedResource Include="**\*.entry" />
    </ItemGroup>
  </Target>
  
  <Target Name="VG_CopyContentFiles" DependsOnTargets="VG_SetVariables" Condition="!Exists('$(ProjectDir)viewgenerator.cache') OR $([System.IO.File]::GetLastWriteTime('$(ViewGeneratorContentFilesPath)viewgenerator.cache').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(ProjectDir)viewgenerator.cache').Ticks)">
    <CreateItem Include="$(ViewGeneratorContentFilesPath)viewgenerator.cache">
      <Output TaskParameter="Include" ItemName="CacheFile"/>
    </CreateItem>
    <CreateItem Include="$(ViewGeneratorContentFilesPath)*.json">
      <Output TaskParameter="Include" ItemName="TemplatesToCopy"/>
    </CreateItem>
    <CreateItem Include="$(ViewGeneratorContentFilesPath)**\*.d.ts">
      <Output TaskParameter="Include" ItemName="FilesToCopy"/>
    </CreateItem>
    <Message Text="Copying View Generator content files" Importance="Normal" />
    <Copy SourceFiles="@(CacheFile)" DestinationFolder="$(ProjectDir)%(CacheFile.RecursiveDir)" />
    <Copy SourceFiles="@(TemplatesToCopy)" DestinationFolder="$(ProjectDir)%(TemplatesToCopy.RecursiveDir)" Condition="!Exists('%(FullPath)')" />
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(ProjectDir)%(FilesToCopy.RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>
  
</Project>